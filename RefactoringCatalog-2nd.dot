digraph Refactoring2ndEdition {
    graph [
        charset="UTF-8";
        //layout=neato; overlap = false; splines = true;
        //layout=circo;
        layout=fdp;
        //layout=twopi; overlap = false; splines = true;
        //layout=dot; rankdir=LR;
    ];

    node [
        shape="note",
        style="filled",
        fillcolor="red",
        fontname="MS UI Gothic"
    ];

    /* -------------------- */
    /* 2nd Edition */
    //subgraph cluster_2Smell {
        //label="2nd Edition Bad Smells";
        // 2nd Bad Smell
        // 2nd P.72
        MysteriousName[label="Mysterious Name(72)\nミステリアスな名前", fillcolor="pink"];
        DuplicatedCode[label="Duplicated Code(72)\n重複したコード(76)", fillcolor="orange"];
        // 2nd P.73
        LongFunction[label="LongFunction(73)\n長すぎる関数", fillcolor="pink"];
        // 2nd P.74
        LongParameterList[label="Long Parameter List(74)\n長すぎるパラメータリスト(78)", fillcolor="orange"];
        GlobalData[label="Global Data(74)\nグローバルデータ", fillcolor="pink"];
        // 2nd P.75
        MutableData[label="Mutable Data(75)\nミュータブルデータ", fillcolor="pink"];
        // 2nd P.76
        DivergentChange[label="Divergent Change(76)\n変更の偏り(79)", fillcolor="orange"];
        ShotgunSurgery[label="Shotgun Surgery(76)\n変更の分散(80)", fillcolor="orange"];
        // 2nd P.77
        FeatureEnvy[label="Feature Envy(77)\n特性の横恋慕(80)", fillcolor="orange"];
        // 2nd P.78
        DataClumps[label="Data Clumps(78)\nデータの群れ(81)", fillcolor="orange"];
        PrimitiveObsession[label="Primitive Obsession(78)\n基本データ型への執着", fillcolor="orange"];
        // 2nd P.79
        RepeatedSwitches[label="Repeated Switches(79)\n繰り返されたスイッチ", fillcolor="pink"];
        Loops[label="Loops(79)\nループ", fillcolor="pink"];
        // 2nd P.80
        LazyElement[label="Lazy Element(80)\n怠け者エレメント", fillcolor="pink"];
        SpeculativeGenerality[label="Speculative Generality(80)\n疑わしき一般化(83)", fillcolor="orange"];
        TemporaryField[label="TemporaryField(80)\n一時属性(84)", fillcolor="orange"];
        // 2nd P.81
        MessageChains[label="Message Chains(81)\nメッセージの連鎖(84)", fillcolor="orange"];
        MiddleMan[label="Middle Man(81)\n仲介人(85)", fillcolor="orange"];
        // 2nd P.82
        InsiderTrading[label="Insider Trading(82)\nインサイダー取引", fillcolor="pink"];
        LargeClass[label="Large Class(82)\巨大なクラス(78)", fillcolor="orange"];
        // 2nd P.83
        AlternativeClasswithDifferentInterfaces[label="Alternative Class with Different Interfaces(83)\nクラスのインタフェース不一致(85)" fillcolor="orange"];
        DataClass[label="Data Class(83)\nデータクラス(86)", fillcolor="orange"];
        RefusedBequest[label="Refused Bequest(83)\n相続拒否(87)", fillcolor="orange"];
        // 2nd P.84
        Comments[label="Comments(84)\nコメント(87)", fillcolor="orange"];
    //}

    //subgraph cluster_2ndCatalog {
        //label="2nd Edition Refactoring Catalog";
        // 2nd Chapter 6 : A First Set of Refactorings
        // 2nd P.106
        ExtractFunction [label="Extract Function(106)\n関数の抽出", fillcolor="skyblue"];
        // 2nd P.115
        InlineFunction [label="Inline Function(115)\n関数のインライン化", fillcolor="skyblue"];
        // 2nd P.119
        ExtractVariable [label="Extract Variable(119)\n変数の抽出", fillcolor="skyblue"];
        // 2nd P.123
        InlineVariable [label="Inline Variable(123)\n変数のインライン化", fillcolor="skyblue"];
        // 2nd P.124
        ChangeFunctionDeclaration [label="Change Function Declaration(124)\n関数宣言の変更", URL="https://refactoring.com/catalog/changeFunctionDeclaration.html", fillcolor="skyblue"];
        RenameFunction [label="Rename Function\n関数名の変更", fillcolor="cyan"];
        ChangeSignature [label="Change Signature\nシグネチャーの変更", fillcolor="cyan"];
        // 2nd P.132
        EncapsulateVariable [label="Encapsulate Variable(132)\n変数のカプセル化", fillcolor="skyblue"];
        // 2nd P.137
        RenameVariable [label="Rename Variable(137)\n変数名の変更", fillcolor="skyblue"];
        // 2nd P.140
        IntroduceParameterObject [label="Introduce Parameter Object(140)\nパラメータオブジェクトの導入(295)", fillcolor="yellow"];
        // 2nd P.144
        CombineFunctionsintoClass [label="Combine Functions into Class(144)\nクラスへ関数の結合", fillcolor="skyblue"];
        // 2nd P.149
        CombineFunctionsintoTransform [label="Combine Functions into Transform(149)\n変換へ関数の結合", fillcolor="skyblue"];
        // 2nd P.154
        SplitPhase [label="Split Phase(154)\nフェーズの分離", fillcolor="skyblue"];

        // 2nd Chapter 7 : Encapsulation
        // 2nd P.162
        EncapsulateRecord [label="Encapsulate Record(162)\nレコードのカプセル化", fillcolor="skyblue"];
        // 2nd P.170
        EncapsulateCollection [label="EncapsulateCollection(170)\nコレクションのカプセル化(208)", fillcolor="yellow"];
        // 2nd P.174
        ReplacePrimitivewithObject [label="Replace Primitive with Object(174)\nオブジェクトによるプリミティブ値の置き換え", fillcolor="skyblue"];
        // 2nd P.178
        ReplaceTempwithQuery [label="Replace Temp with Query(178)\n問い合せによる一時変数の置き換え(120)", fillcolor="yellow"];
        // 2nd P.182
        ExtractClass [label="Extract Class(182)\nクラスの抽出(149)", fillcolor="yellow"];
        // 2nd P.186
        InlineClass [label="Inline Class(186)\nクラスのインライン化(154)", fillcolor="yellow"];
        // 2nd P.189
        HideDelegate [label="Hide Delegate(189)\n委譲の隠蔽(157)", fillcolor="yellow"];
        // 2nd P.192
        RemoveMiddleMan [label="Remove Middle Man(192)\n仲介人の除去(160)", fillcolor="yellow"];
        // 2nd P.195
        SubstituteAlgorithm [label="Substitute Algorithm(195)\nアルゴリズムの取り替え", fillcolor="yellow"];

        // 2nd Chapter 8 : Moving Features
        // 2nd P.198
        MoveFunction [label="Move Function(198)\n関数の移動", fillcolor="skyblue"];
        // 2nd P.207
        MoveField [label="Move Field(207)\nフィールドの移動(146)", fillcolor="yellow"];
        // 2nd P.213
        MoveStatementsintoFunction [label="Move Statements into Function(213)\n 関数へステートメントの移動", fillcolor="skyblue"];
        MoveStatementsintoFunction -> MoveStatementstoCallers [label="inverse of", color="blue"];
        // 2nd P.217
        MoveStatementstoCallers [label="Move Statements to Callers(217)\n呼び出し元へステートメントの移動", fillcolor="skyblue"];
        MoveStatementstoCallers -> MoveStatementsintoFunction [label="inverse of", color="blue"];
        // 2nd P.222
        ReplaceInlineCodewithFunctionCall [label="Replace Inline Code with Function Call(222)\n関数呼び出しによるインラインコードの置き換え", fillcolor="skyblue"];
        // 2nd P.223
        SlideStatements [label="Slide Statements(223)\nステートメントのスライド", fillcolor="skyblue"];
        // 2nd P.227
        SplitLoop [label="Split Loop(227)\nループの分離", fillcolor="skyblue"];
        // 2nd P.231
        ReplaceLoopwithPipeline [label="Replace Loop with Pipeline(231)\nパイプラインによるループの置き換え", fillcolor="skyblue"];
        // 2nd P.237
        RemoveDeadCode [label="Remove Dead Code(237)\nデッドコードの削除", fillcolor="skyblue"];

        // 2nd Chapter 9 : Organizing Data
        // 2nd P.240
        SplitVariable [label="Split Variable(240)\n変数の分離", fillcolor="skyblue"];
        // 2nd P.244
        RenameField [label="Rename Field(244)\nフィールドの削除", fillcolor="skyblue"];
        // 2nd P.248
        ReplaceDerivedVariablewithQuery [label="Replace Derived Variable with Query(248)\n問い合せによる派生変数の置き換え", fillcolor="skyblue"];
        // 2nd P.252
        ChangeReferencetoValue [label="Change Reference to Value(252)\n参照から値への変更(183)", fillcolor="yellow"];
        ChangeReferencetoValue -> ChangeValuetoReference [label="inverse of", color="blue"];
        // 2nd P.256
        ChangeValuetoReference [label="Change Value to Reference(256)\n値から参照への変更(179)", fillcolor="yellow"];
        ChangeValuetoReference -> ChangeReferencetoValue [label="inverse of", color="blue"];

        // 2nd Chapter 10 : Simplifying Conditional Logic
        // 2nd P.260
        DecomposeConditional [label="Decompose Conditional(260)\n条件記述の分解(238)", fillcolor="yellow"];
        // 2nd P.263
        ConsolidateConditionalExpression [label="Consolidate Conditional Expression(263)\n条件記述の統合(240)", fillcolor="yellow"];
        // 2nd P.266
        ReplaceNestedConditionalwithGuardClauses [label="Replace Nested Conditional with Guard Clauses(266)\nガード節による入れ子条件記述の置き換え(250)", fillcolor="yellow"];
        // 2nd P.272
        ReplaceConditionalwithPolymorphism [label="Replace Conditional with Polymorphism(272)\nポリモーフィズムによる条件記述の置き換え(255)", fillcolor="yellow"];
        // 2nd P.289
        IntroduceSpecialCase [label="Introduce Special Case(289)\n特殊ケースの導入", fillcolor="skyblue"];
        // 2nd P.302
        IntroduceAssertion [label="Introduce Assertion(302)\n表明の導入(267)", fillcolor="yellow"];

        // 2nd Chapter 11 : Refactoring APIs
        // 2nd P.306
        SeparateQueryfromModifier [label="Separate Query from Modifier(306)\n問い合せと更新の分離(279)", fillcolor="yellow"];
        // 2nd P.310
        ParameterizeFunction [label="Parameterize Function(310)\n関数のパラメタライズ", fillcolor="skyblue"];
        // 2nd P.314
        RemoveFlagArgument [label="Remove Flag Argument(314)\nフラグ引数の削除", fillcolor="skyblue"];
        // 2nd P.319
        PreserveWholeObject [label="Preserve Whole Object(319)\nオブジェクトそのものの受け渡し(288)", fillcolor="yellow"];
        // 2nd P.324
        ReplaceParameterwithQuery [label="Replace Parameter with Query(324)\n問い合せによるパラメータの置き換え", fillcolor="skyblue"];
        // 2nd P.327
        ReplaceQuerywithParameter [label="Replace Query with Parameter(327)\nパラメータによる問い合せの置き換え", fillcolor="skyblue"];
        // 2nd P.331
        RemoveSettingMethod [label="Remove Setting Method(331)\nsetメソッドの削除(300)", fillcolor="yellow"];
        // 2nd P.334
        ReplaceConstructorwithFactoryFunction [label="Replace Constructor with Factory Function(334)\nFactory関数によるコンストラクタの置き換え", fillcolor="skyblue"];
        // 2nd P.337
        ReplaceFunctionwithCommand [label="Replace Function with Command(337)\nコマンドによる関数の置き換え", fillcolor="skyblue"];
        // 2nd P.344
        ReplaceCommandwithFunction [label="Replace Command with Function(344)\n関数によるコマンドの置き換え", fillcolor="skyblue"];

        // 2nd Chapter 12 : Dealing with Inheritance
        // 2nd P.350
        PullUpMethod [label="Pull Up Method(350)\nメソッドの引き上げ(322)", fillcolor="yellow"];
        // 2nd P.353
        PullUpField [label="Pull Up Field(353)\nフィールドの引き上げ(320)", fillcolor="yellow"];
        // 2nd P.355
        PullUpConstructorBody [label="Pull Up Constructor Body(355)\nコンストラクタ本体の引き上げ(325)", fillcolor="yellow"];
        // 2nd P.359
        PushDownMethod [label="Push Down Method(359)\nメソッドの引き下げ(328)", fillcolor="yellow"];
        // 2nd P.361
        PushDownField [label="Push Down Field(361)\nフィールドの引き下げ(329)", fillcolor="yellow"];
        // 2nd P.362
        ReplaceTypeCodewithSubclasses [label="Replace Type Code with Subclass(362)\nサブクラスによるタイプコードの置き換え(223)", fillcolor="yellow"];
        // 2nd P.369
        RemoveSubclass [label="Remove Subclass(369)\nサブクラスの削除", fillcolor="skyblue"];
        // 2nd P.375
        ExtractSuperclass [label="Extract Superclass(375)\nスーパークラスの抽出", fillcolor="skyblue"];
        // 2nd P.380
        CollapseHierarchy [label="Collapse Hierarchy(380)\n階層の平坦化(344)", fillcolor="yellow"];
        // 2nd P.381
        ReplaceSubclasswithDelegate [label="Replace Subclass with Delegate(381)\n委譲によるサブクラスの置き換え", fillcolor="skyblue"];
        // 2nd P.399
        ReplaceSuperclasswithDelegate [label="Replace Superclass with Delegate(399)\n委譲によるスーパークラスの置き換え", fillcolor="skyblue"];
    //}   // 2nd Refactoring Catalog end

    // 関連

    // 2nd P.83
    AlternativeClasswithDifferentInterfaces -> ChangeFunctionDeclaration[label="refactoring", color="darkgreen"];
    AlternativeClasswithDifferentInterfaces -> MoveFunction[label="refactoring", color="darkgreen"];
    AlternativeClasswithDifferentInterfaces -> ExtractSuperclass[label="refactoring", color="darkgreen"];
    DataClass -> EncapsulateRecord[label="refactoring", color="darkgreen"];
    DataClass -> RemoveSettingMethod[label="refactoring", color="darkgreen"];
    DataClass -> MoveFunction[label="refactoring", color="darkgreen"];
    DataClass -> ExtractFunction[label="refactoring", color="darkgreen"];
    DataClass -> SplitPhase[label="refactoring", color="darkgreen"];

    // 2nd P.84
    Comments -> ExtractFunction[label="refactoring", color="darkgreen"];
    Comments -> ChangeFunctionDeclaration[label="refactoring", color="darkgreen"];
    Comments -> IntroduceAssertion[label="refactoring", color="darkgreen"];

    // 2nd P.78
    DataClumps -> ExtractClass[label="refactoring", color="darkgreen"];
    DataClumps -> IntroduceParameterObject[label="refactoring", color="darkgreen"];
    DataClumps -> PreserveWholeObject[label="refactoring", color="darkgreen"];

    // 2nd P.76
    DivergentChange -> SplitPhase[label="refactoring", color="darkgreen"];
    DivergentChange -> MoveFunction[label="refactoring", color="darkgreen"];
    DivergentChange -> ExtractFunction[label="refactoring", color="darkgreen"];
    DivergentChange -> ExtractClass[label="refactoring", color="darkgreen"];

    // 2nd P.72
    DuplicatedCode -> ExtractFunction[label="refactoring", color="darkgreen"];
    DuplicatedCode -> SlideStatements[label="refactoring", color="darkgreen"];
    DuplicatedCode -> PullUpMethod[label="refactoring", color="darkgreen"];

    // 2nd P.77
    FeatureEnvy -> MoveFunction[label="refactoring", color="darkgreen"];
    FeatureEnvy -> ExtractFunction[label="refactoring", color="darkgreen"];

    // 2nd P.74
    GlobalData -> EncapsulateVariable[label="refactoring", color="darkgreen"];

    // 2nd P.82
    InsiderTrading -> MoveFunction[label="refactoring", color="darkgreen"];
    InsiderTrading -> MoveField[label="refactoring", color="darkgreen"];
    InsiderTrading -> HideDelegate[label="refactoring", color="darkgreen"];
    InsiderTrading -> ReplaceSubclasswithDelegate[label="refactoring", color="darkgreen"];
    InsiderTrading -> ReplaceSuperclasswithDelegate[label="refactoring", color="darkgreen"];

    // 2nd P.82
    LargeClass -> ExtractClass[label="refactoring", color="darkgreen"];
    LargeClass -> ExtractSuperclass[label="refactoring", color="darkgreen"];
    LargeClass -> ReplaceTypeCodewithSubclasses[label="refactoring", color="darkgreen"];

    // 2nd P.80
    LazyElement -> InlineFunction[label="refactoring", color="darkgreen"];
    LazyElement -> InlineClass[label="refactoring", color="darkgreen"];
    LazyElement -> CollapseHierarchy[label="refactoring", color="darkgreen"];

    // 2nd P.73
    LongFunction -> ExtractFunction[label="refactoring", color="darkgreen"];
    LongFunction -> ReplaceTempwithQuery[label="refactoring", color="darkgreen"];
    LongFunction -> IntroduceParameterObject[label="refactoring", color="darkgreen"];
    LongFunction -> PreserveWholeObject[label="refactoring", color="darkgreen"];
    LongFunction -> ReplaceFunctionwithCommand[label="refactoring", color="darkgreen"];
    LongFunction -> DecomposeConditional[label="refactoring", color="darkgreen"];
    LongFunction -> ReplaceConditionalwithPolymorphism[label="refactoring", color="darkgreen"];
    LongFunction -> SplitLoop[label="refactoring", color="darkgreen"];

    // 2nd P.74
    LongParameterList -> ReplaceParameterwithQuery[label="refactoring", color="darkgreen"];
    LongParameterList -> PreserveWholeObject[label="refactoring", color="darkgreen"];
    LongParameterList -> IntroduceParameterObject[label="refactoring", color="darkgreen"];
    LongParameterList -> RemoveFlagArgument[label="refactoring", color="darkgreen"];
    LongParameterList -> CombineFunctionsintoClass[label="refactoring", color="darkgreen"];

    // 2nd P.79
    Loops -> ReplaceLoopwithPipeline[label="refactoring", color="darkgreen"];

    // 2nd P.81
    MessageChains -> HideDelegate[label="refactoring", color="darkgreen"];
    MessageChains -> ExtractFunction[label="refactoring", color="darkgreen"];
    MessageChains -> MoveFunction[label="refactoring", color="darkgreen"];

    // 2nd P.81
    MiddleMan -> RemoveMiddleMan[label="refactoring", color="darkgreen"];
    MiddleMan -> InlineFunction[label="refactoring", color="darkgreen"];
    MiddleMan -> ReplaceSuperclasswithDelegate[label="refactoring", color="darkgreen"];
    MiddleMan -> ReplaceSubclasswithDelegate[label="refactoring", color="darkgreen"];

    // 2nd P.75
    MutableData -> EncapsulateVariable[label="refactoring", color="darkgreen"];
    MutableData -> SplitVariable[label="refactoring", color="darkgreen"];
    MutableData -> SlideStatements[label="refactoring", color="darkgreen"];
    MutableData -> ExtractFunction[label="refactoring", color="darkgreen"];
    MutableData -> SeparateQueryfromModifier[label="refactoring", color="darkgreen"];
    MutableData -> RemoveSettingMethod[label="refactoring", color="darkgreen"];
    MutableData -> ReplaceDerivedVariablewithQuery[label="refactoring", color="darkgreen"];
    MutableData -> CombineFunctionsintoClass[label="refactoring", color="darkgreen"];
    MutableData -> CombineFunctionsintoTransform[label="refactoring", color="darkgreen"];
    MutableData -> ChangeReferencetoValue[label="refactoring", color="darkgreen"];

    // 2nd P.72
    MysteriousName -> ChangeFunctionDeclaration[label="refactoring", color="darkgreen"];
    MysteriousName -> RenameVariable[label="refactoring", color="darkgreen"];
    MysteriousName -> RenameField[label="refactoring", color="darkgreen"];

    // 2nd P.78
    PrimitiveObsession -> ReplacePrimitivewithObject[label="refactoring", color="darkgreen"];
    PrimitiveObsession -> ReplaceTypeCodewithSubclasses[label="refactoring", color="darkgreen"];
    PrimitiveObsession -> ReplaceConditionalwithPolymorphism[label="refactoring", color="darkgreen"];
    PrimitiveObsession -> ExtractClass[label="refactoring", color="darkgreen"];
    PrimitiveObsession -> IntroduceParameterObject[label="refactoring", color="darkgreen"];

    // 2nd P.83
    RefusedBequest -> PushDownMethod[label="refactoring", color="darkgreen"];
    RefusedBequest -> PushDownField[label="refactoring", color="darkgreen"];
    RefusedBequest -> ReplaceSubclasswithDelegate[label="refactoring", color="darkgreen"];
    RefusedBequest -> ReplaceSuperclasswithDelegate[label="refactoring", color="darkgreen"];

    // 2nd P.79
    RepeatedSwitches -> ReplaceConditionalwithPolymorphism[label="refactoring", color="darkgreen"];

    // 2nd P.76
    ShotgunSurgery -> MoveFunction[label="refactoring", color="darkgreen"];
    ShotgunSurgery -> MoveField[label="refactoring", color="darkgreen"];
    ShotgunSurgery -> CombineFunctionsintoClass[label="refactoring", color="darkgreen"];
    ShotgunSurgery -> CombineFunctionsintoTransform[label="refactoring", color="darkgreen"];
    ShotgunSurgery -> SplitPhase[label="refactoring", color="darkgreen"];
    ShotgunSurgery -> InlineFunction[label="refactoring", color="darkgreen"];
    ShotgunSurgery -> InlineClass[label="refactoring", color="darkgreen"];

    // 2nd P.80
    SpeculativeGenerality -> CollapseHierarchy[label="refactoring", color="darkgreen"];
    SpeculativeGenerality -> InlineFunction[label="refactoring", color="darkgreen"];
    SpeculativeGenerality -> InlineClass[label="refactoring", color="darkgreen"];
    SpeculativeGenerality -> ChangeFunctionDeclaration[label="refactoring", color="darkgreen"];
    SpeculativeGenerality -> RemoveDeadCode[label="refactoring", color="darkgreen"];

    // 2nd P.80
    TemporaryField -> ExtractClass [label="refactoring", color="darkgreen"]
    TemporaryField -> MoveFunction [label="refactoring", color="darkgreen"];
    TemporaryField -> IntroduceSpecialCase [label="refactoring", color="darkgreen"];

    // 2nd P.106
    //ExtractFunction -> ExtractMethod [label="formerly", color="gray"];
    ExtractFunction -> InlineFunction [label="inverse of", color="blue"];
    // 2nd P.115
    //InlineFunction -> InlineMethod [label="formerly", color="gray"];
    InlineFunction -> ExtractFunction [label="inverse of", color="blue"];
    // 2nd P.119
    ExtractVariable -> InlineVariable [label="inverse of", color="blue"];
    // 2nd P.123
    //InlineVariable -> InlineTemp [label="formerly", color="gray"];
    InlineVariable -> ExtractVariable [label="inverse of", color="blue"];
    // 2nd P.124
    ChangeFunctionDeclaration -> RenameFunction[label="aka\n別名", color="cyan"];
    //ChangeFunctionDeclaration -> RenameMethod[label="formerly", color="gray"];
    //ChangeFunctionDeclaration -> AddParameter[label="formerly", color="gray"];
    //ChangeFunctionDeclaration -> RemoveParameter[label="formerly", color="gray"];
    ChangeFunctionDeclaration -> ChangeSignature[label="aka\n別名", color="cyan"];
    // 2nd P.132
    //EncapsulateVariable -> SelfEncapsulateField [label="formerly", color="gray"];
    //EncapsulateVariable -> EncapsulateField [label="formerly", color="gray"];
    // 2nd P.162
    //EncapsulateRecord -> ReplaceRecordwithDataClass [label="formerly", color="gray"];
    // 2nd P.174
    //ReplacePrimitivewithObject -> ReplaceDataValuewithObject [label="formerly", color="gray"];
    //ReplacePrimitivewithObject -> ReplaceTypeCodewithClass [label="formerly", color="gray"];
    // 2nd P.182
    ExtractClass -> InlineClass [label="inverse of", color="blue"];
    // 2nd P.186
    InlineClass -> ExtractClass [label="inverse of", color="blue"];
    // 2nd P.189
    HideDelegate -> RemoveMiddleMan [label="inverse of", color="blue"];
    // 2nd P.192
    RemoveMiddleMan -> HideDelegate [label="inverse of", color="blue"];
    // 2nd P.198
    //MoveFunction -> MoveMethod [label="formerly", color="gray"];
    // 2nd P.223
    //SlideStatements -> ConsolidateDuplicateConditionalFragments [label="formerly", color="gray"];
    // 2nd P.240
    //SplitVariable -> RemoveAssignmentstoParameters [label="formerly", color="gray"]
    //SplitVariable -> SplitTemp [label="formerly", color="gray"];
    // 2nd P.289
    //IntroduceSpecialCase -> IntroduceNullObject [label="formerly", color="gray"];
    // 2nd P.310
    //ParameterizeFunction -> ParameterizeMethod [label="formerly", color="gray"];
    // 2nd P.314
    //RemoveFlagArgument -> ReplaceParameterwithExplicitMethods [label="formerly", color="gray"];
    // 2nd P.324
    //ReplaceParameterwithQuery -> ReplaceParameterwithMethod [label="formerly", color="gray"];
    ReplaceParameterwithQuery -> ReplaceQuerywithParameter [label="inverse of", color="blue"];
    // 2nd P.327
    ReplaceQuerywithParameter -> ReplaceParameterwithQuery [label="inverse of", color="blue"];
    // 2nd P.334
    //ReplaceConstructorwithFactoryFunction -> ReplaceConstructorwithFactoryMethod [label="formerly", color="gray"];
    // 2nd P.337
    //ReplaceFunctionwithCommand -> ReplaceMethodwithMethodObject [label="formerly", color="gray"];
    ReplaceFunctionwithCommand -> ReplaceCommandwithFunction [label="inverse of", color="blue"];
    // 2nd P.344
    ReplaceCommandwithFunction -> ReplaceFunctionwithCommand [label="inverse of", color="blue"];
    // 2nd P.350
    PullUpMethod -> PushDownMethod [label="inverse of", color="blue"];
    // 2nd P.353
    PullUpField -> PushDownField [label="inverse of", color="blue"];
    // 2nd P.359
    PushDownMethod -> PullUpMethod [label="inverse of", color="blue"];
    // 2nd P.361
    PushDownField -> PullUpField [label="inverse of", color="blue"];
    // 2nd P.362
    //ReplaceTypeCodewithSubclasses -> ReplaceTypeCodewithStateStrategy [label="subsumes\n包含"];
    //ReplaceTypeCodewithSubclasses -> ExtractSubclass [label="subsumes\n包含"];
    ReplaceTypeCodewithSubclasses -> RemoveSubclass [label="inverse of", color="blue"];
    // 2nd P.369
    RemoveSubclass -> ReplaceTypeCodewithSubclasses [label="inverse of", color="blue"];
    // 2nd P.399
    //ReplaceSuperclasswithDelegate -> ReplaceInheritancewithDelegation [label="formerly", color="gray"];
}