digraph Refactoring2ndEdition {
    graph [
        charset="UTF-8";
        //layout=neato; overlap = false; splines = true;
        //layout=circo;
        //layout=fdp; overlap = false;
        layout=twopi; overlap = false; splines = true;
        //layout=dot; rankdir=LR;
    ];

    node [
        shape="note",
        style="filled",
        fillcolor="red",
    ];

    /* -------------------- */
    /* 1st Edition / Japanese */
    subgraph cluster_1 {
        label="1st Edition";

        // 第3章 : コードの不吉な臭い
        // P.76
        // DuplicatedCode;
        LongMethod[label="Long Method\n長すぎるメソッド(76)", fillcolor="lightgrey"];
        // P.78
        // LargeClass;
        // LongParameterList;
        // P.79
        // DivergentChange;
        // P.80
        // ShotgunSurgery;
        // FeatureEnvy;
        // P.81
        // DataClumps;
        // PrimitiveObsession;
        // P.82
        SwitchStatement[label="Switch Statement\nスイッチ文(82)", fillcolor="lightgrey"];
        // P.83
        ParallelInheritanceHierarchies[label="Parallel Inheritance Hierarchies\nパラレル継承(83)", fillcolor="lightgrey"];
        LazyClass[label="Lazy Class\n怠け者クラス(83)", fillcolor="lightgrey"];
        // SpeculativeGenerality;
        //P.84
        // TemporaryField;
        // MessageChains;
        // P.85
        // MiddleMan;
        InappropriateIntimacy[label="Inappropriate Intimacy\n不適切な関係(85)", fillcolor="lightgrey"];
        // AlternativeClasswithDifferentInterfaces;
        // P.86
        IncompleteLibraryClass[label="Incomplete Library Class\n未熟なクラスライブラリ(86)", fillcolor="lightgrey"];
        // DataClass;
        // P.87
        // RefusedBequest;
        // Comments;

        // 第6章 : メソッドの構成
        // P.110 replaced -> Extract Function
        ExtractMethod [label="Extract Method\nメソッドの抽出(110)", fillcolor="gray"];
        // P.117 replaced -> Inline Function
        InlineMethod [label="Inline Method\nメソッドのインライン化(117)", fillcolor="gray"];
        // P.119 replaced -> Inline Variable
        InlineTemp [label="Inline Temp\n一時変数のインライン化(119)", fillcolor="gray"];
        // P.120 kept
        // ReplaceTempwithQuery;
        // P.124 kept
        // Extract Variable;
        IntroduceExplaningVariable [label="Introduce Explaning Variable\n説明用変数の導入(124)", fillcolor="gray"];
        // P.128 replaced -> Split Variable
        // SplitTemporaryVariable;
        SplitTemp [label="Split Temp\n一時変数の分離(128)", fillcolor="gray"]
        // P.131 replaced -> Split Variable
        RemoveAssignmentstoParameters [label="Remove Assignments to Parameters\nパラメータへの代入の除去(131)", fillcolor="gray"];
        // P.135
        ReplaceMethodwithMethodObject [label="Replace Method with Method Object\nメソッドオブジェクトによるメソッドの置き換え", fillcolor="gray"];
        // P.139
        // SubstituteAlgorithm;

        // 第7章 : オブジェクト間での特性の移動
        // P.142
        MoveMethod [label="Move Method\nメソッドの移動(142)", fillcolor="gray"];
        // P.146
        // MoveField;
        // P.149
        // ExtractClass;
        // P.154
        // InlineClass;
        // P.157
        // HideDelegate;
        // P.160
        // RemoveMiddleMan;
        // P.162
        IntroduceForeignMethod [label="Introduce Foreign Method\n外部メソッドの導入(162)", fillcolor="gray"];
        // P.164
        IntroduceLocalExtension [label="Introduce Local Extension\n局所的拡張の導入(164)", fillcolor="gray"];

        // 第8章 : データの再編成
        // P.171
        SelfEncapsulateField [label="Self-Encapsulate Field\n自己カプセル化フィールド(171)", fillcolor="gray"];
        // P.175
        ReplaceDataValuewithObject [label="Replace Data Value with Object\nオブジェクトによるデータ値の置き換え(175)", fillcolor="gray"];
        // P.179
        // ChangeValuetoReference;
        // P.183
        // ChangeReferencetoValue;
        // P.186
        ReplaceArraywithObject [label="Replace Array with Object\nオブジェクトによる配列の置き換え(186)", fillcolor="gray"];
        // P.189
        DuplicateObservedData [label="Duplicate Observed Data\n観察されるデータの複製(189)", fillcolor="gray"];
        // P.197
        ChangeUnidirectionalAssociationtoBidirectional [label="Change Unidirectional Association to Bidirectional\n単方向関連の双方向への変更(197)", fillcolor="gray"];
        ChangeUnidirectionalAssociationtoBidirectional -> ChangeBidirectionalAssociationtoUnidirectional [label="inverse of", color="blue"];
        // P.200
        ChangeBidirectionalAssociationtoUnidirectional [label="Change Bidirectional Association to Unidirectional\n双方向関連の単方向への変更(200)", fillcolor="gray"];
        ChangeBidirectionalAssociationtoUnidirectional -> ChangeUnidirectionalAssociationtoBidirectional [label="inverse of", color="blue"];
        // P.204
        ReplaceMagicNumberwithSymbolicConstant [label="Replace Magic Number with Symbolic Constant\nシンボリック定数によるマジックナンバーの置き換え(204)", fillcolor="gray"];
        // P.206
        EncapsulateField [label="Encapsulate Field\nフィールドのカプセル化(206)", fillcolor="gray"];
        // P.208
        // EncapsulateCollection;
        // P.217
        ReplaceRecordwithDataClass [label="Replace Record with Data Class\nデータクラスによるレコードの置き換え(217)", fillcolor="gray"];
        // P.218
        ReplaceTypeCodewithClass [label="Replace Type Code with Class\nクラスによるタイプコードの置き換え(218)", fillcolor="gray"];
        // P.223
        //ReplaceTypeCodewithSubclasses;
        // P.227
        ReplaceTypeCodewithStateStrategy [label="Replace Type Code with State/Strategy\nState/Strategyによるタイプコードの置き換え(227)", fillcolor="gray"];
        // P.232
        ReplaceSubclasswithFields [label="Replace Subclass with Fields\nフィールドによるサブクラスの置き換え(232)", fillcolor="gray"];

        // 第9章 : 条件記述の単純化
        // P.238
        // DecomposeConditional;
        // P.240
        // ConsolidateConditionalExpression;
        // P.243
        ConsolidateDuplicateConditionalFragments [label="Consolidate Duplicate Conditional Fragments\n重複した条件記述の断片の統合(243)", fillcolor="gray"];
        // P.245
        RemoveControlFlag [label="Remove Control Flag\n制御フラグの削除(245)", fillcolor="gray"];
        // P.250
        // ReplaceNestedConditionalwithGuardClauses;
        // P.255
        // ReplaceConditionalwithPolymorphism;
        // P.260
        IntroduceNullObject [label="Introduce Null Object\nヌルオブジェクトの導入(260)", fillcolor="gray"];
        // P.267
        // IntroduceAssertion;

        // 第10章 : メソッド呼び出しの単純化
        // P.273
        RenameMethod [label="Rename Method\nメソッド名の変更(273)", fillcolor="gray"];
        // P.275
        AddParameter [label="Add Parameter\nパラメータの追加(275)", fillcolor="gray"];
        // P.277
        RemoveParameter [label="Remove Paramter\nパラメータの削除(277)", fillcolor="gray"];
        // P.279
        // SeparateQueryfromModifier;
        // P.283
        ParameterizeMethod [label="Parameterize Method\nメソッドのパラメタライズ(283)", fillcolor="gray"];
        // P.285
        ReplaceParameterwithExplicitMethods [label="Replace Parameter with Explicit Methods\n明示的なメソッド群によるパラメータの置き換え(285)", fillcolor="gray"];
        // P.288
        // PreserveWholeObject;
        // P.292
        ReplaceParameterwithMethod [label="Replace Parameter with Method\nメソッドによるパラメータの置き換え(292)", fillcolor="gray"];
        // P.295
        // IntroduceParameterObject;
        // P.300
        // RemoveSettingMethod;
        // P.303
        HideMethod [label="Hide Method\nメソッドの隠蔽(303)", fillcolor="gray"];
        // P.304
        ReplaceConstructorwithFactoryMethod [label="Replace Constructor with Factory Method\nFactory Methodによるコンストラクタの置き換え(304)", fillcolor="gray"];
        // P.308
        EncapsulateDowncast [label="Encapsulate Downcast\nダウンキャストのカプセル化(308)", fillcolor="gray"];
        // P.310
        ReplaceErrorCodewithException [label="Replace Error Code with Exception\n例外によるエラーコードの置き換え(310)", fillcolor="gray"];
        // P.315
        ReplaceExceptionwithTest [label="Replace Exception with Test\n条件判定による例外の置き換え(315)", fillcolor="gray"];

        // 第11章 : 継承の取り扱い
        // P.320
        // PullUpField;
        // P.322
        // PullUpMethod;
        // P.325
        // PullUpConstructorBody;
        // P.328
        // PushDownMethod;
        // P.329
        // PushDownField;
        // P.330
        ExtractSubclass [label="Extract Subclass\nサブクラスの抽出(330)", fillcolor="gray", pos="5,-1!"];
        // P.336
        ExtractSuperclass [label="Extract Superclass\nスーパークラスの抽出(336)", fillcolor="gray", pos="5,-2!"];
        // P.341
        ExtractInterface [label="Extract Interface\nインタフェースの抽出(341)", fillcolor="gray", pos="5,-3!"];
        // P.344
        // CollapseHierarchy;
        // P.345
        FormTemplateMethod [label="Form Template Method\nTemplate Methodの形成(345)", fillcolor="gray", pos="5,-4!"];
        // P.352
        ReplaceInheritancewithDelegation [label="Replace Inheritance with Delegation\n委譲による継承の置き換え(352)", fillcolor="gray", pos="5,-5!"];
        // P.355
        ReplaceDelegationwithInheritance [label="Replace Delegation with Inheritance\n継承による委譲の置き換え(355)", fillcolor="gray", pos="5,-6!"];

        // 第12章 : 大きなリファクタリング
        // P.362
        TeaseApartInheritance [label="Tease Apart Inheritance\n継承の切り離し", fillcolor="gray"];
        // P.368
        ConvertProceduralDesigntoObjects [label="Convert Procedural Design to Objects\n手続き的な設計からオブジェクト指向への変換(368)", fillcolor="gray"];
        // P.370
        SeparateDomainfromPresentation [label="Separate Domain from Presentation\nプレゼンテーションとドメインの分離(370)", fillcolor="gray"];
        // P.375
        ExtractHierarchy [label="Extract Hierarchy\n階層の抽出(375)", fillcolor="gray"];

    } // 1st end

    // 関連
    LongFunction -> LongMethod[label="formerly", color="grey"];
    LazyElement -> LazyClass[label="formerly", color="grey"];
    InsiderTrading -> InappropriateIntimacy[label="formerly", color="grey"];
    RepeatedSwitches -> SwitchStatement[label="formerly", color="grey"];

    ExtractMethod -> InlineMethod [label="inverse of", color="blue"];
    InlineMethod -> ExtractMethod [label="inverse of", color="blue"];
    ReplaceInheritancewithDelegation -> ReplaceDelegationwithInheritance [label="inverse of", color="blue"];
    ReplaceDelegationwithInheritance -> ReplaceInheritancewithDelegation [label="inverse of", color="blue"];

    /* -------------------- */
    /* 2nd Edition */
    subgraph cluster_2 {
        label="2nd Edition";

    // 2nd Bad Smell
        // 2nd P.72
        MysteriousName[label="Mysterious Name(72)\nミステリアスな名前", fillcolor="pink"];
        DuplicatedCode[label="Duplicated Code(72)\n重複したコード(76)", fillcolor="orange"];
        // 2nd P.73
        LongFunction[label="LongFunction(73)\n長すぎる関数", fillcolor="pink"];
        // 2nd P.74
        LongParameterList[label="Long Parameter List(74)\n長すぎるパラメータリスト(78)", fillcolor="orange"];
        GlobalData[label="Global Data(74)\nグローバルデータ", fillcolor="pink"];
        // 2nd P.75
        MutableData[label="Mutable Data(75)\nミュータブルデータ", fillcolor="pink"];
        // 2nd P.76
        DivergentChange[label="Divergent Change(76)\n変更の偏り(79)", fillcolor="orange"];
        ShotgunSurgery[label="Shotgun Surgery(76)\n変更の分散(80)", fillcolor="orange"];
        // 2nd P.77
        FeatureEnvy[label="Feature Envy(77)\n特性の横恋慕(80)", fillcolor="orange"];
        // 2nd P.78
        DataClumps[label="Data Clumps(78)\nデータの群れ(81)", fillcolor="orange"];
        PrimitiveObsession[label="Primitive Obsession(78)\n基本データ型への執着", fillcolor="orange"];
        // 2nd P.79
        RepeatedSwitches[label="Repeated Switches(79)\n繰り返されたスイッチ", fillcolor="pink"];
        Loops[label="Loops(79)\nループ", fillcolor="pink"];
        // 2nd P.80
        LazyElement[label="Lazy Element(80)\n怠け者エレメント", fillcolor="pink"];
        SpeculativeGenerality[label="Speculative Generality(80)\n疑わしき一般化(83)", fillcolor="orange"];
        TemporaryField[label="TemporaryField(80)\n一時属性(84)", fillcolor="orange"];
        // 2nd P.81
        MessageChains[label="Message Chains(81)\nメッセージの連鎖(84)", fillcolor="orange"];
        MiddleMan[label="Middle Man(81)\n仲介人(85)", fillcolor="orange"];
        // 2nd P.82
        InsiderTrading[label="Insider Trading(82)\nインサイダー取引", fillcolor="pink"];
        LargeClass[label="Large Class(82)\巨大なクラス(78)", fillcolor="orange"];
        // 2nd P.83
        AlternativeClasswithDifferentInterfaces[label="Alternative Class with Different Interfaces(83)\nクラスのインタフェース不一致(85)" fillcolor="orange"];
        DataClass[label="Data Class(83)\nデータクラス(86)", fillcolor="orange"];
        RefusedBequest[label="Refused Bequest(83)\n相続拒否(87)", fillcolor="orange"];
        // 2nd P.84
        Comments[label="Comments(84)\nコメント(87)", fillcolor="orange"];

    // 2nd Chapter 6 : A First Set of Refactorings
    subgraph cluster_2_6 {
        label="2nd Chapter 6";
        // 2nd P.106
        ExtractFunction [label="Extract Function(106)\n関数の抽出", fillcolor="skyblue", pos="0,-1!"];
        // 2nd P.115
        InlineFunction [label="Inline Function(115)\n関数のインライン化", fillcolor="skyblue", pos="0,-2!"];
        // 2nd P.119
        ExtractVariable [label="Extract Variable(119)\n変数の抽出", fillcolor="skyblue", pos="0,-3!"];
        // 2nd P.123
        InlineVariable [label="Inline Variable(123)\n変数のインライン化", fillcolor="skyblue", pos="0,-4!"];
        // 2nd P.124
        ChangeFunctionDeclaration [label="Change Function Declaration(124)\n関数宣言の変更", URL="https://refactoring.com/catalog/changeFunctionDeclaration.html", fillcolor="skyblue", pos="0,-5!"];
        RenameFunction [label="Rename Function\n関数名の変更", fillcolor="cyan", pos="3,-5!"];
        ChangeSignature [label="Change Signature\nシグネチャーの変更", fillcolor="cyan", pos="3,-6!"];
        // 2nd P.132
        EncapsulateVariable [label="Encapsulate Variable(132)\n変数のカプセル化", fillcolor="skyblue", pos="0,-6!"];
        // 2nd P.137
        RenameVariable [label="Rename Variable(137)\n変数名の変更", fillcolor="skyblue", pos="0,-7!"];
        // 2nd P.140
        IntroduceParameterObject [label="Introduce Parameter Object(140)\nパラメータオブジェクトの導入(295)", fillcolor="yellow", pos="0,-8!"];
        // 2nd P.144
        CombineFunctionsintoClass [label="Combine Functions into Class(144)\nクラスへ関数の結合", fillcolor="skyblue", pos="0,-9!"];
        // 2nd P.149
        CombineFunctionsintoTransform [label="Combine Functions into Transform(149)\n変換へ関数の結合", fillcolor="skyblue", pos="0,-10!"];
        // 2nd P.154
        SplitPhase [label="Split Phase(154)\nフェーズの分離", fillcolor="skyblue", pos="0,-11!"];
    }

    // 2nd Chapter 7 : Encapsulation
    subgraph cluster_2_7 {
        label="2nd Chapter 7";
        // 2nd P.162
        EncapsulateRecord [label="Encapsulate Record(162)\nレコードのカプセル化", fillcolor="skyblue", pos="0,-1!"];
        // 2nd P.170
        EncapsulateCollection [label="EncapsulateCollection(170)\nコレクションのカプセル化(208)", fillcolor="yellow", pos="0,-2!"];
        // 2nd P.174
        ReplacePrimitivewithObject [label="Replace Primitive with Object(174)\nオブジェクトによるプリミティブ値の置き換え", fillcolor="skyblue", pos="0,-3!"];
        // 2nd P.178
        ReplaceTempwithQuery [label="Replace Temp with Query(178)\n問い合せによる一時変数の置き換え(120)", fillcolor="yellow", pos="0,-4!"];
        // 2nd P.182
        ExtractClass [label="Extract Class(182)\nクラスの抽出(149)", fillcolor="yellow", pos="0,-5!"];
        // 2nd P.186
        InlineClass [label="Inline Class(186)\nクラスのインライン化(154)", fillcolor="yellow", pos="0,-6!"];
        // 2nd P.189
        HideDelegate [label="Hide Delegate(189)\n委譲の隠蔽(157)", fillcolor="yellow", pos="0,-7!"];
        // 2nd P.192
        RemoveMiddleMan [label="Remove Middle Man(192)\n仲介人の除去(160)", fillcolor="yellow", pos="0,-8!"];
        // 2nd P.195
        SubstituteAlgorithm [label="Substitute Algorithm(195)\nアルゴリズムの取り替え", fillcolor="yellow", pos="0,-9!"];
    }

    // 2nd Chapter 8 : Moving Features
    subgraph cluster_2_8 {
        label="2nd Chapter 8";
        // 2nd P.198
        MoveFunction [label="Move Function(198)\n関数の移動", fillcolor="skyblue", pos="0,-1!"];
        // 2nd P.207
        MoveField [label="Move Field(207)\nフィールドの移動(146)", fillcolor="yellow", pos="0,-2!"];
        // 2nd P.213
        MoveStatementsintoFunction [label="Move Statements into Function(213)\n 関数へステートメントの移動", fillcolor="skyblue", pos="0,-3!"];
        MoveStatementsintoFunction -> MoveStatementstoCallers [label="inverse of", color="blue"];
        // 2nd P.217
        MoveStatementstoCallers [label="Move Statements to Callers(217)\n呼び出し元へステートメントの移動", fillcolor="skyblue", pos="0,-4!"];
        MoveStatementstoCallers -> MoveStatementsintoFunction [label="inverse of", color="blue"];
        // 2nd P.222
        ReplaceInlineCodewithFunctionCall [label="Replace Inline Code with Function Call(222)\n関数呼び出しによるインラインコードの置き換え", fillcolor="skyblue", pos="0,-5!"];
        // 2nd P.223
        SlideStatements [label="Slide Statements(223)\nステートメントのスライド", fillcolor="skyblue", pos="0,-6!"];
        // 2nd P.227
        SplitLoop [label="Split Loop(227)\nループの分離", fillcolor="skyblue", pos="0,-7!"];
        // 2nd P.231
        ReplaceLoopwithPipeline [label="Replace Loop with Pipeline(231)\nパイプラインによるループの置き換え", fillcolor="skyblue", pos="0,-8!"];
        // 2nd P.237
        RemoveDeadCode [label="Remove Dead Code(237)\nデッドコードの削除", fillcolor="skyblue", pos="0,-9!"];
    }

    // 2nd Chapter 9 : Organizing Data
    subgraph cluster_2_9 {
        label="2nd Chapter 9";
        // 2nd P.240
        SplitVariable [label="Split Variable(240)\n変数の分離", fillcolor="skyblue", pos="0,-1!"];
        // 2nd P.244
        RenameField [label="Rename Field(244)\nフィールド名の変更", fillcolor="skyblue", pos="0,-2!"];
        // 2nd P.248
        ReplaceDerivedVariablewithQuery [label="Replace Derived Variable with Query(248)\n問い合せによる派生変数の置き換え", fillcolor="skyblue", pos="0,-3!"];
        // 2nd P.252
        ChangeReferencetoValue [label="Change Reference to Value(252)\n参照から値への変更(183)", fillcolor="yellow", pos="0,-4!"];
        ChangeReferencetoValue -> ChangeValuetoReference [label="inverse of", color="blue"];
        // 2nd P.256
        ChangeValuetoReference [label="Change Value to Reference(256)\n値から参照への変更(179)", fillcolor="yellow", pos="0,-5!"];
        ChangeValuetoReference -> ChangeReferencetoValue [label="inverse of", color="blue"];
    }

    // 2nd Chapter 10 : Simplifying Conditional Logic
    subgraph cluster_2_10 {
        label="2nd Chapter 10";
        // 2nd P.260
        DecomposeConditional [label="Decompose Conditional(260)\n条件記述の分解(238)", fillcolor="yellow", pos="0,-1!"];
        // 2nd P.263
        ConsolidateConditionalExpression [label="Consolidate Conditional Expression(263)\n条件記述の統合(240)", fillcolor="yellow", pos="0,-2!"];
        // 2nd P.266
        ReplaceNestedConditionalwithGuardClauses [label="Replace Nested Conditional with Guard Clauses(266)\nガード節による入れ子条件記述の置き換え(250)", fillcolor="yellow", pos="0,-3!"];
        // 2nd P.272
        ReplaceConditionalwithPolymorphism [label="Replace Conditional with Polymorphism(272)\nポリモーフィズムによる条件記述の置き換え(255)", fillcolor="yellow", pos="0,-4!"];
        // 2nd P.289
        IntroduceSpecialCase [label="Introduce Special Case(289)\n特殊ケースの導入", fillcolor="skyblue", pos="0,-5!"];
        // 2nd P.302
        IntroduceAssertion [label="Introduce Assertion(302)\n表明の導入(267)", fillcolor="yellow", pos="0,-6!"];
    }

    // 2nd Chapter 11 : Refactoring APIs
    subgraph cluster_2_11 {
        label="2nd Chapter 11";
        // 2nd P.306
        SeparateQueryfromModifier [label="Separate Query from Modifier(306)\n問い合せと更新の分離(279)", fillcolor="yellow"];
        // 2nd P.310
        ParameterizeFunction [label="Parameterize Function(310)\n関数のパラメタライズ", fillcolor="skyblue"];
        // 2nd P.314
        RemoveFlagArgument [label="Remove Flag Argument(314)\nフラグ引数の削除", fillcolor="skyblue"];
        // 2nd P.319
        PreserveWholeObject [label="Preserve Whole Object(319)\nオブジェクトそのものの受け渡し(288)", fillcolor="yellow"];
        // 2nd P.324
        ReplaceParameterwithQuery [label="Replace Parameter with Query(324)\n問い合せによるパラメータの置き換え", fillcolor="skyblue"];
        // 2nd P.327
        ReplaceQuerywithParameter [label="Replace Query with Parameter(327)\nパラメータによる問い合せの置き換え", fillcolor="skyblue"];
        // 2nd P.331
        RemoveSettingMethod [label="Remove Setting Method(331)\nsetメソッドの削除(300)", fillcolor="yellow"];
        // 2nd P.334
        ReplaceConstructorwithFactoryFunction [label="Replace Constructor with Factory Function(334)\nFactory関数によるコンストラクタの置き換え", fillcolor="skyblue"];
        // 2nd P.337
        ReplaceFunctionwithCommand [label="Replace Function with Command(337)\nコマンドによる関数の置き換え", fillcolor="skyblue"];
        // 2nd P.344
        ReplaceCommandwithFunction [label="Replace Command with Function(344)\n関数によるコマンドの置き換え", fillcolor="skyblue"];
    }

    // 2nd Chapter 12 : Dealing with Inheritance
    subgraph cluster_2_12 {
        label="2nd Chapter 12";
        // 2nd P.350
        PullUpMethod [label="Pull Up Method(350)\nメソッドの引き上げ(322)", fillcolor="yellow"];
        // 2nd P.353
        PullUpField [label="Pull Up Field(353)\nフィールドの引き上げ(320)", fillcolor="yellow"];
        // 2nd P.355
        PullUpConstructorBody [label="Pull Up Constructor Body(355)\nコンストラクタ本体の引き上げ(325)", fillcolor="yellow"];
        // 2nd P.359
        PushDownMethod [label="Push Down Method(359)\nメソッドの引き下げ(328)", fillcolor="yellow"];
        // 2nd P.361
        PushDownField [label="Push Down Field(361)\nフィールドの引き下げ(329)", fillcolor="yellow"];
        // 2nd P.362
        ReplaceTypeCodewithSubclasses [label="Replace Type Code with Subclass(362)\nサブクラスによるタイプコードの置き換え(223)", fillcolor="yellow"];
        // 2nd P.369
        RemoveSubclass [label="Remove Subclass(369)\nサブクラスの削除", fillcolor="skyblue"];
        // 2nd P.375
        ExtractSuperclass [label="Extract Superclass(375)\nスーパークラスの抽出", fillcolor="skyblue"];
        // 2nd P.380
        CollapseHierarchy [label="Collapse Hierarchy(380)\n階層の平坦化(344)", fillcolor="yellow"];
        // 2nd P.381
        ReplaceSubclasswithDelegate [label="Replace Subclass with Delegate(381)\n委譲によるサブクラスの置き換え", fillcolor="skyblue"];
        // 2nd P.399
        ReplaceSuperclasswithDelegate [label="Replace Superclass with Delegate(399)\n委譲によるスーパークラスの置き換え", fillcolor="skyblue"];
    }

    }   // 2nd end

    // 関連

    // 2nd P.83
    AlternativeClasswithDifferentInterfaces -> ChangeFunctionDeclaration[label="refactoring", color="darkgreen"];
    AlternativeClasswithDifferentInterfaces -> MoveFunction[label="refactoring", color="darkgreen"];
    AlternativeClasswithDifferentInterfaces -> ExtractSuperclass[label="refactoring", color="darkgreen"];
    DataClass -> EncapsulateRecord;
    DataClass -> RemoveSettingMethod;
    DataClass -> MoveFunction;
    DataClass -> ExtractFunction;
    DataClass -> SplitPhase;

    // 2nd P.84
    Comments -> ExtractFunction[label="refactoring", color="darkgreen"];
    Comments -> ChangeFunctionDeclaration;
    Comments -> IntroduceAssertion;

    // 2nd P.78
    DataClumps -> ExtractClass;
    DataClumps -> IntroduceParameterObject;
    DataClumps -> PreserveWholeObject;

    // 2nd P.76
    DivergentChange -> SplitPhase;
    DivergentChange -> MoveFunction;
    DivergentChange -> ExtractFunction;
    DivergentChange -> ExtractClass;

    // 2nd P.72
    DuplicatedCode -> ExtractFunction;
    DuplicatedCode -> SlideStatements;
    DuplicatedCode -> PullUpMethod;

    // 2nd P.77
    FeatureEnvy -> MoveFunction;
    FeatureEnvy -> ExtractFunction;

    // 2nd P.74
    GlobalData -> EncapsulateVariable;

    // 2nd P.82
    InsiderTrading -> MoveFunction;
    InsiderTrading -> MoveField;
    InsiderTrading -> HideDelegate;
    InsiderTrading -> ReplaceSubclasswithDelegate;
    InsiderTrading -> ReplaceSuperclasswithDelegate;

    // 2nd P.82
    LargeClass -> ExtractClass;
    LargeClass -> ExtractSuperclass;
    LargeClass -> ReplaceTypeCodewithSubclasses;

    // 2nd P.80
    LazyElement -> InlineFunction;
    LazyElement -> InlineClass;
    LazyElement -> CollapseHierarchy;

    // 2nd P.73
    LongFunction -> ExtractFunction;
    LongFunction -> ReplaceTempwithQuery;
    LongFunction -> IntroduceParameterObject;
    LongFunction -> PreserveWholeObject;
    LongFunction -> ReplaceFunctionwithCommand;
    LongFunction -> DecomposeConditional;
    LongFunction -> ReplaceConditionalwithPolymorphism;
    LongFunction -> SplitLoop;

    //
    
    // 2nd P.80
    TemporaryField -> ExtractClass [label="refactoring", color="darkgreen"];
    TemporaryField -> MoveFunction [label="refactoring", color="darkgreen"];
    TemporaryField -> IntroduceSpecialCase [label="refactoring", color="darkgreen"];

    // 2nd P.106
    ExtractFunction -> ExtractMethod [label="formerly", color="gray"];
    ExtractFunction -> InlineFunction [label="inverse of", color="blue"];
    // 2nd P.115
    InlineFunction -> InlineMethod [label="formerly", color="gray"];
    InlineFunction -> ExtractFunction [label="inverse of", color="blue"];
    // 2nd P.119
    ExtractVariable -> InlineVariable [label="inverse of", color="blue"];
    // 2nd P.123
    InlineVariable -> InlineTemp [label="formerly", color="gray"];
    InlineVariable -> ExtractVariable [label="inverse of", color="blue"];
    // 2nd P.124
    ChangeFunctionDeclaration -> RenameFunction[label="aka\n別名", color="cyan"];
    ChangeFunctionDeclaration -> RenameMethod[label="formerly", color="gray"];
    ChangeFunctionDeclaration -> AddParameter[label="formerly", color="gray"];
    ChangeFunctionDeclaration -> RemoveParameter[label="formerly", color="gray"];
    ChangeFunctionDeclaration -> ChangeSignature[label="aka\n別名", color="cyan"];
    // 2nd P.132
    EncapsulateVariable -> SelfEncapsulateField [label="formerly", color="gray"];
    EncapsulateVariable -> EncapsulateField [label="formerly", color="gray"];
    // 2nd P.162
    EncapsulateRecord -> ReplaceRecordwithDataClass [label="formerly", color="gray"];
    // 2nd P.174
    ReplacePrimitivewithObject -> ReplaceDataValuewithObject [label="formerly", color="gray"];
    ReplacePrimitivewithObject -> ReplaceTypeCodewithClass [label="formerly", color="gray"];
    // 2nd P.182
    ExtractClass -> InlineClass [label="inverse of", color="blue"];
    // 2nd P.186
    InlineClass -> ExtractClass [label="inverse of", color="blue"];
    // 2nd P.189
    HideDelegate -> RemoveMiddleMan [label="inverse of", color="blue"];
    // 2nd P.192
    RemoveMiddleMan -> HideDelegate [label="inverse of", color="blue"];
    // 2nd P.198
    MoveFunction -> MoveMethod [label="formerly", color="gray"];
    // 2nd P.223
    SlideStatements -> ConsolidateDuplicateConditionalFragments [label="formerly", color="gray"];
    // 2nd P.240
    SplitVariable -> RemoveAssignmentstoParameters [label="formerly", color="gray"]
    SplitVariable -> SplitTemp [label="formerly", color="gray"];
    // 2nd P.289
    IntroduceSpecialCase -> IntroduceNullObject [label="formerly", color="gray"];
    // 2nd P.310
    ParameterizeFunction -> ParameterizeMethod [label="formerly", color="gray"];
    // 2nd P.314
    RemoveFlagArgument -> ReplaceParameterwithExplicitMethods [label="formerly", color="gray"];
    // 2nd P.324
    ReplaceParameterwithQuery -> ReplaceParameterwithMethod [label="formerly", color="gray"];
    ReplaceParameterwithQuery -> ReplaceQuerywithParameter [label="inverse of", color="blue"];
    // 2nd P.327
    ReplaceQuerywithParameter -> ReplaceParameterwithQuery [label="inverse of", color="blue"];
    // 2nd P.334
    ReplaceConstructorwithFactoryFunction -> ReplaceConstructorwithFactoryMethod [label="formerly", color="gray"];
    // 2nd P.337
    ReplaceFunctionwithCommand -> ReplaceMethodwithMethodObject [label="formerly", color="gray"];
    ReplaceFunctionwithCommand -> ReplaceCommandwithFunction [label="inverse of", color="blue"];
    // 2nd P.344
    ReplaceCommandwithFunction -> ReplaceFunctionwithCommand [label="inverse of", color="blue"];
    // 2nd P.350
    PullUpMethod -> PushDownMethod [label="inverse of", color="blue"];
    // 2nd P.353
    PullUpField -> PushDownField [label="inverse of", color="blue"];
    // 2nd P.359
    PushDownMethod -> PullUpMethod [label="inverse of", color="blue"];
    // 2nd P.361
    PushDownField -> PullUpField [label="inverse of", color="blue"];
    // 2nd P.362
    ReplaceTypeCodewithSubclasses -> ReplaceTypeCodewithStateStrategy [label="subsumes\n包含"];
    ReplaceTypeCodewithSubclasses -> ExtractSubclass [label="subsumes\n包含"];
    ReplaceTypeCodewithSubclasses -> RemoveSubclass [label="inverse of", color="blue"];
    // 2nd P.369
    RemoveSubclass -> ReplaceTypeCodewithSubclasses [label="inverse of", color="blue"];
    // 2nd P.399
    ReplaceSuperclasswithDelegate -> ReplaceInheritancewithDelegation [label="formerly", color="gray"];

}